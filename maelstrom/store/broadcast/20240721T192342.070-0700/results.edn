{:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true,
              :exceptions ({:count 86,
                            :class clojure.lang.ExceptionInfo,
                            :example #jepsen.history.Op{:index 1,
                                                        :time 107617299,
                                                        :type :info,
                                                        :process 0,
                                                        :f :broadcast,
                                                        :value 0,
                                                        :exception {:via [{:type clojure.lang.ExceptionInfo,
                                                                           :message "Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:type \"broadcast\", :message 0, :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"broadcast_ok\"), {:k :msg_id} Int, :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1, :message 0, :msg_id 1, :type \"broadcast_ok\"}\n\nThis is malformed because:\n\n{:message disallowed-key}\n\nSee doc/protocol.md for more guidance.",
                                                                           :data {:type :malformed-rpc-response,
                                                                                  :body {:in_reply_to 1,
                                                                                         :message 0,
                                                                                         :msg_id 1,
                                                                                         :type "broadcast_ok"}},
                                                                           :at [slingshot.support$stack_trace
                                                                                invoke
                                                                                "support.clj"
                                                                                201]}],
                                                                    :trace [[slingshot.support$stack_trace
                                                                             invoke
                                                                             "support.clj"
                                                                             201]
                                                                            [maelstrom.client$check_body
                                                                             invokeStatic
                                                                             "client.clj"
                                                                             188]
                                                                            [maelstrom.client$check_body
                                                                             invoke
                                                                             "client.clj"
                                                                             181]
                                                                            [maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566
                                                                             invoke
                                                                             "broadcast.clj"
                                                                             27]
                                                                            [maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566
                                                                             invoke
                                                                             "broadcast.clj"
                                                                             27]
                                                                            [maelstrom.workload.broadcast$client$reify__16644
                                                                             invoke_BANG_
                                                                             "broadcast.clj"
                                                                             203]
                                                                            [jepsen.client.Validate
                                                                             invoke_BANG_
                                                                             "client.clj"
                                                                             83]
                                                                            [jepsen.generator.interpreter.ClientWorker
                                                                             invoke_BANG_
                                                                             "interpreter.clj"
                                                                             65]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             140]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__12908
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             123]
                                                                            [clojure.core$binding_conveyor_fn$fn__5823
                                                                             invoke
                                                                             "core.clj"
                                                                             2047]
                                                                            [clojure.lang.AFn
                                                                             call
                                                                             "AFn.java"
                                                                             18]
                                                                            [java.util.concurrent.FutureTask
                                                                             run
                                                                             "FutureTask.java"
                                                                             317]
                                                                            [java.util.concurrent.ThreadPoolExecutor
                                                                             runWorker
                                                                             "ThreadPoolExecutor.java"
                                                                             1144]
                                                                            [java.util.concurrent.ThreadPoolExecutor$Worker
                                                                             run
                                                                             "ThreadPoolExecutor.java"
                                                                             642]
                                                                            [java.lang.Thread
                                                                             run
                                                                             "Thread.java"
                                                                             1570]],
                                                                    :cause "Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:type \"broadcast\", :message 0, :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"broadcast_ok\"), {:k :msg_id} Int, :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1, :message 0, :msg_id 1, :type \"broadcast_ok\"}\n\nThis is malformed because:\n\n{:message disallowed-key}\n\nSee doc/protocol.md for more guidance.",
                                                                    :data {:type :malformed-rpc-response,
                                                                           :body {:in_reply_to 1,
                                                                                  :message 0,
                                                                                  :msg_id 1,
                                                                                  :type "broadcast_ok"}}},
                                                        :error "indeterminate: Malformed RPC response. Maelstrom sent node n0 the following request:\n\n{:type \"broadcast\", :message 0, :msg_id 1}\n\nAnd expected a response of the form:\n\n{:type (eq \"broadcast_ok\"), {:k :msg_id} Int, :in_reply_to Int}\n\n... but instead received\n\n{:in_reply_to 1, :message 0, :msg_id 1, :type \"broadcast_ok\"}\n\nThis is malformed because:\n\n{:message disallowed-key}\n\nSee doc/protocol.md for more guidance."}})},
 :stats {:valid? false,
         :count 192,
         :ok-count 106,
         :fail-count 0,
         :info-count 86,
         :by-f {:broadcast {:valid? false,
                            :count 86,
                            :ok-count 0,
                            :fail-count 0,
                            :info-count 86},
                :read {:valid? true,
                       :count 106,
                       :ok-count 106,
                       :fail-count 0,
                       :info-count 0}}},
 :availability {:valid? true, :ok-fraction 0.5520833},
 :net {:all {:send-count 388,
             :recv-count 388,
             :msg-count 388,
             :msgs-per-op 2.0208333},
       :clients {:send-count 388, :recv-count 388, :msg-count 388},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:worst-stale (),
            :duplicated-count 0,
            :valid? true,
            :lost-count 0,
            :lost (),
            :stable-count 86,
            :stale-count 0,
            :stale (),
            :never-read-count 0,
            :stable-latencies {0 0, 0.5 0, 0.95 0, 0.99 0, 1 0},
            :attempt-count 86,
            :never-read (),
            :duplicated {}},
 :valid? false}
