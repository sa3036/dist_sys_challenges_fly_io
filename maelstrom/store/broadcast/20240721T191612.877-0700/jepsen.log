2024-07-21 19:16:12,964{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 4369cce20ed9ca46807251273d071ea0d46a97bb (plus uncommitted changes)
2024-07-21 19:16:12,966{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin /home/sa3036/go/bin/maelstrom-broadcast /home/sa3036/go/bin/maelstrom-broadcast --node-count 1 --time-limit 20 --rate 10
2024-07-21 19:16:13,219{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args ["/home/sa3036/go/bin/maelstrom-broadcast"]
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x17a5cb99"
         "maelstrom.db$db$reify__16142@17a5cb99"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x808fa1" "2024-07-21T19:16:12.877-07:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x5b52ce28"
         "maelstrom.net$jepsen_net$reify__15251@5b52ce28"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__16644
         "0x5ec10ab1"
         "maelstrom.workload.broadcast$client$reify__16644@5ec10ab1"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x6701fbf3"
         "java.util.concurrent.CyclicBarrier@6701fbf3"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x63f88d35"
         "jepsen.checker$compose$reify__11881@63f88d35"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "/home/sa3036/go/bin/maelstrom-broadcast"
  "/home/sa3036/go/bin/maelstrom-broadcast"
  "--node-count"
  "1"
  "--time-limit"
  "20"
  "--rate"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@2e962cec"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@78543f0d"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/home/sa3036/go/bin/maelstrom-broadcast"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x3794621d"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@3794621d"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x737e4a7b"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@737e4a7b"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Mix
                                        {:i 0,
                                         :gens [({:f :broadcast, :value 0}
                                                 {:f :broadcast, :value 1}
                                                 {:f :broadcast, :value 2}
                                                 {:f :broadcast, :value 3}
                                                 {:f :broadcast, :value 4}
                                                 {:f :broadcast, :value 5}
                                                 {:f :broadcast, :value 6}
                                                 {:f :broadcast, :value 7}
                                                 ...)
                                                ({:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 ...)]})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x747e0a31"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@747e0a31"],
           :gen ()})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x60ee1a29"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@60ee1a29"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0x6142b9dd"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x5bd11ad6"
         "maelstrom.net$jepsen_os$reify__15254@5bd11ad6"]
 :time-limit 20
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-07-21 19:16:18,110{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-07-21 19:16:18,113{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-07-21 19:16:18,117{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-07-21 19:16:18,124{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-07-21 19:16:18,128{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-07-21 19:16:18,129{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /home/sa3036/go/bin/maelstrom-broadcast ["/home/sa3036/go/bin/maelstrom-broadcast"]
2024-07-21 19:16:18,213{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-07-21 19:16:23,246{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2024-07-21 19:16:24,231{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-07-21 19:16:24,234{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n0 crashed with exit status 2. Before crashing, it wrote to STDOUT:

{"src":"n0","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}

And to STDERR:

2024/07/21 19:16:18 Received {c0 n0 {"type":"init","node_id":"n0","node_ids":["n0"],"msg_id":1}}
2024/07/21 19:16:18 Node n0 initialized
2024/07/21 19:16:18 Sent {"src":"n0","dest":"c0","body":{"in_reply_to":1,"type":"init_ok"}}
2024/07/21 19:16:18 Received {c1 n0 {"type":"topology","topology":{"n0":[]},"msg_id":1}}
panic: interface conversion: interface {} is map[string]interface {}, not map[string][]interface {}

goroutine 33 [running]:
main.main.func2({{0xc0001042e0, 0x2}, {0xc0001042e2, 0x2}, {0xc00010a080, 0x33, 0x40}})
	/home/sa3036/Documents/git_projects/dist_sys_challenges_fly_io/maelstrom-broadcast/main.go:43 +0x1d0
github.com/jepsen-io/maelstrom/demo/go.(*Node).handleMessage(0x0?, 0x0?, {{0xc0001042e0, 0x2}, {0xc0001042e2, 0x2}, {0xc00010a080, 0x33, 0x40}})
	/home/sa3036/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20240408130303-0186f398f965/node.go:151 +0x96
github.com/jepsen-io/maelstrom/demo/go.(*Node).Run.func2()
	/home/sa3036/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20240408130303-0186f398f965/node.go:129 +0x88
created by github.com/jepsen-io/maelstrom/demo/go.(*Node).Run
	/home/sa3036/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20240408130303-0186f398f965/node.go:127 +0x41b

Full STDERR logs are available in /home/sa3036/Documents/git_projects/dist_sys_challenges_fly_io/maelstrom/store/broadcast/20240721T191612.877-0700/node-logs/n0.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16142.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__8744$G__8725__8748.invoke(db.clj:12)
	at jepsen.db$fn__8744$G__8724__8753.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:1570)
