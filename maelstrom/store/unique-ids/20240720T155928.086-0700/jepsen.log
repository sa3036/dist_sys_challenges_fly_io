2024-07-20 15:59:28,179{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 1f4306857434624c65beaf37ce5011898d8ff3f3 (plus uncommitted changes)
2024-07-20 15:59:28,180{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w unique-ids --bin /home/sa3036/go/bin/maelstrom-unique-ids --time-limit 30 --rate 1000 --node-count 3 --availability total --nemesis partition
2024-07-20 15:59:28,436{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 3
 :availability :total
 :max-txn-length 4
 :concurrency 3
 :db
 #object[maelstrom.db$db$reify__16142
         "0x3938e876"
         "maelstrom.db$db$reify__16142@3938e876"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "unique-ids"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x7de4bd8f" "2024-07-20T15:59:28.086-07:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x193e65d5"
         "maelstrom.net$jepsen_net$reify__15251@193e65d5"]
 :client
 #object[maelstrom.workload.unique_ids$client$reify__20074
         "0x2a97b4b8"
         "maelstrom.workload.unique_ids$client$reify__20074@2a97b4b8"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x250fc0d1"
         "java.util.concurrent.CyclicBarrier@250fc0d1"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1000.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x7ddf193a"
         "jepsen.checker$compose$reify__11881@7ddf193a"]
 :argv
 ("test"
  "-w"
  "unique-ids"
  "--bin"
  "/home/sa3036/go/bin/maelstrom-unique-ids"
  "--time-limit"
  "30"
  "--rate"
  "1000"
  "--node-count"
  "3"
  "--availability"
  "total"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@17a5cb99"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@808fa1"]})
 :nodes ["n0" "n1" "n2"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/home/sa3036/go/bin/maelstrom-unique-ids"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 30000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x7545cb17"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@7545cb17"],
                   :gen (jepsen.generator.Stagger
                         {:dt 20000000000,
                          :next-time nil,
                          :gen (jepsen.generator.FlipFlop
                                {:gens [#object[jepsen.nemesis.combined$partition_package$start__16420
                                                "0x635b3ec7"
                                                "jepsen.nemesis.combined$partition_package$start__16420@635b3ec7"]
                                        ({:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         ...)],
                                 :i 0})})})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x15aa3084"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@15aa3084"],
                   :gen (jepsen.generator.Stagger
                         {:dt 2000000,
                          :next-time nil,
                          :gen (jepsen.generator.Repeat
                                {:remaining -1, :gen {:f :generate}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x4e6c4c55"
         "maelstrom.net$jepsen_os$reify__15254@4e6c4c55"]
 :time-limit 30
 :workload :unique-ids
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-07-20 15:59:32,982{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-07-20 15:59:32,986{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-07-20 15:59:32,992{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-07-20 15:59:32,994{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2024-07-20 15:59:32,994{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2024-07-20 15:59:32,996{GMT}	INFO	[jepsen node n1] maelstrom.process: launching /home/sa3036/go/bin/maelstrom-unique-ids []
2024-07-20 15:59:32,996{GMT}	INFO	[jepsen node n2] maelstrom.process: launching /home/sa3036/go/bin/maelstrom-unique-ids []
2024-07-20 15:59:33,002{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-07-20 15:59:33,007{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-07-20 15:59:33,008{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /home/sa3036/go/bin/maelstrom-unique-ids []
2024-07-20 15:59:33,093{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-07-20 15:59:33,140{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:majorities-ring
2024-07-20 15:59:33,140{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:generate	nil
2024-07-20 15:59:33,141{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:generate	nil
2024-07-20 15:59:33,140{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:generate	nil
2024-07-20 15:59:33,184{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n1" #{"n2"}, "n2" #{"n0"}, "n0" #{"n1"}}]
2024-07-20 15:59:34,626{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-07-20 15:59:34,628{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-07-20 15:59:38,151{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:info	:generate	nil	:net-timeout
2024-07-20 15:59:38,165{GMT}	INFO	[jepsen worker 2] jepsen.util: 5	:invoke	:generate	nil
2024-07-20 15:59:38,169{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:generate	nil	:net-timeout
2024-07-20 15:59:38,160{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:generate	nil	:net-timeout
2024-07-20 15:59:38,175{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:generate	nil
2024-07-20 15:59:38,183{GMT}	INFO	[jepsen worker 1] jepsen.util: 4	:invoke	:generate	nil
2024-07-20 15:59:40,142{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:one
2024-07-20 15:59:40,206{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n0" #{"n2" "n1"}, "n2" #{"n0"}, "n1" #{"n0"}}]
2024-07-20 15:59:43,169{GMT}	INFO	[jepsen worker 2] jepsen.util: 5	:info	:generate	nil	:net-timeout
2024-07-20 15:59:43,172{GMT}	INFO	[jepsen worker 2] jepsen.util: 8	:invoke	:generate	nil
2024-07-20 15:59:43,184{GMT}	INFO	[jepsen worker 1] jepsen.util: 4	:info	:generate	nil	:net-timeout
2024-07-20 15:59:43,185{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:invoke	:generate	nil
2024-07-20 15:59:43,181{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:info	:generate	nil	:net-timeout
2024-07-20 15:59:43,187{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:invoke	:generate	nil
2024-07-20 15:59:45,007{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-07-20 15:59:45,009{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-07-20 15:59:48,178{GMT}	INFO	[jepsen worker 2] jepsen.util: 8	:info	:generate	nil	:net-timeout
2024-07-20 15:59:48,186{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:info	:generate	nil	:net-timeout
2024-07-20 15:59:48,188{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:info	:generate	nil	:net-timeout
2024-07-20 15:59:48,181{GMT}	INFO	[jepsen worker 2] jepsen.util: 11	:invoke	:generate	nil
2024-07-20 15:59:48,201{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:invoke	:generate	nil
2024-07-20 15:59:48,203{GMT}	INFO	[jepsen worker 1] jepsen.util: 10	:invoke	:generate	nil
2024-07-20 15:59:53,201{GMT}	INFO	[jepsen worker 2] jepsen.util: 11	:info	:generate	nil	:net-timeout
2024-07-20 15:59:53,202{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:info	:generate	nil	:net-timeout
2024-07-20 15:59:53,204{GMT}	INFO	[jepsen worker 1] jepsen.util: 10	:info	:generate	nil	:net-timeout
2024-07-20 15:59:53,204{GMT}	INFO	[jepsen worker 0] jepsen.util: 12	:invoke	:generate	nil
2024-07-20 15:59:53,219{GMT}	INFO	[jepsen worker 1] jepsen.util: 13	:invoke	:generate	nil
2024-07-20 15:59:53,224{GMT}	INFO	[jepsen worker 2] jepsen.util: 14	:invoke	:generate	nil
2024-07-20 15:59:55,302{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:one
2024-07-20 15:59:55,310{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n0" #{"n2" "n1"}, "n2" #{"n0"}, "n1" #{"n0"}}]
2024-07-20 15:59:58,206{GMT}	INFO	[jepsen worker 0] jepsen.util: 12	:info	:generate	nil	:net-timeout
2024-07-20 15:59:58,211{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:invoke	:generate	nil
2024-07-20 15:59:58,220{GMT}	INFO	[jepsen worker 1] jepsen.util: 13	:info	:generate	nil	:net-timeout
2024-07-20 15:59:58,223{GMT}	INFO	[jepsen worker 1] jepsen.util: 16	:invoke	:generate	nil
2024-07-20 15:59:58,225{GMT}	INFO	[jepsen worker 2] jepsen.util: 14	:info	:generate	nil	:net-timeout
2024-07-20 15:59:58,227{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:invoke	:generate	nil
2024-07-20 15:59:59,817{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-07-20 15:59:59,818{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-07-20 16:00:03,215{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:info	:generate	nil	:net-timeout
2024-07-20 16:00:03,224{GMT}	INFO	[jepsen worker 1] jepsen.util: 16	:info	:generate	nil	:net-timeout
2024-07-20 16:00:03,228{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:info	:generate	nil	:net-timeout
2024-07-20 16:00:03,341{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2024-07-20 16:00:03,781{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2024-07-20 16:00:03,799{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2024-07-20 16:00:03,802{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2024-07-20 16:00:04,222{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-07-20 16:00:04,226{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n0 crashed with exit status 1. Before crashing, it wrote to STDOUT:

{"src":"n0","dest":"c2","body":{"in_reply_to":1,"type":"init_ok"}}

And to STDERR:

2024/07/20 15:59:33 Received {c2 n0 {"type":"init","node_id":"n0","node_ids":["n0","n1","n2"],"msg_id":1}}
2024/07/20 15:59:33 Node n0 initialized
2024/07/20 15:59:33 Sent {"src":"n0","dest":"c2","body":{"in_reply_to":1,"type":"init_ok"}}
2024/07/20 15:59:33 Received {c8 n0 {"type":"generate","msg_id":1}}
2024/07/20 15:59:33 No handler for {"id":8,"src":"c8","dest":"n0","body":{"type":"generate","msg_id":1}}

Full STDERR logs are available in /home/sa3036/Documents/git_projects/dist_sys_challenges_fly_io/maelstrom/store/unique-ids/20240720T155928.086-0700/node-logs/n0.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16142.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__8744$G__8725__8748.invoke(db.clj:12)
	at jepsen.db$fn__8744$G__8724__8753.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:1570)
